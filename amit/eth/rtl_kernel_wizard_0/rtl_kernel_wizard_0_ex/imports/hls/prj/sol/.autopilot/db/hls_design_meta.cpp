#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("m_axi_A_AWVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_A_AWREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_A_AWADDR", 64, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_A_AWID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_A_AWLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_A_AWSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_A_AWBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_A_AWLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_A_AWCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_A_AWPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_A_AWQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_A_AWREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_A_AWUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_A_WVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_A_WREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_A_WDATA", 512, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_A_WSTRB", 64, hls_out, 0, "m_axi", "STRB", 1),
	Port_Property("m_axi_A_WLAST", 1, hls_out, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_A_WID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_A_WUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_A_ARVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_A_ARREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_A_ARADDR", 64, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_A_ARID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_A_ARLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_A_ARSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_A_ARBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_A_ARLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_A_ARCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_A_ARPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_A_ARQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_A_ARREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_A_ARUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_A_RVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_A_RREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_A_RDATA", 512, hls_in, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_A_RLAST", 1, hls_in, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_A_RID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_A_RUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_A_RRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_A_BVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_A_BREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_A_BRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_A_BID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_A_BUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("s_axi_control_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_AWADDR", 6, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_ARADDR", 6, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_BRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("interrupt", 1, hls_out, -1, "", "", 1),
};
const char* HLS_Design_Meta::dut_name = "rtl_kernel_wizard_0";
