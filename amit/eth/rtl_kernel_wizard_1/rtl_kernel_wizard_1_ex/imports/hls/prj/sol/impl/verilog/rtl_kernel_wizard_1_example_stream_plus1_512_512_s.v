// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rtl_kernel_wizard_1_example_stream_plus1_512_512_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mac1_s_TDATA,
        mac1_s_TVALID,
        mac1_s_TREADY,
        mac1_s_TKEEP,
        mac1_s_TLAST,
        mac1_m_TDATA,
        mac1_m_TVALID,
        mac1_m_TREADY,
        mac1_m_TKEEP,
        mac1_m_TLAST
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [511:0] mac1_s_TDATA;
input   mac1_s_TVALID;
output   mac1_s_TREADY;
input  [63:0] mac1_s_TKEEP;
input  [0:0] mac1_s_TLAST;
output  [511:0] mac1_m_TDATA;
output   mac1_m_TVALID;
input   mac1_m_TREADY;
output  [63:0] mac1_m_TKEEP;
output  [0:0] mac1_m_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mac1_s_TREADY;
reg mac1_m_TVALID;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mac1_s_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    mac1_m_TDATA_blk_n;
reg    ap_block_state2;
wire   [0:0] acc_last_V_fu_134_p1;
wire   [31:0] trunc_ln674_fu_139_p1;
wire   [31:0] p_Result_3_1_fu_149_p4;
wire   [31:0] p_Result_3_2_fu_165_p4;
wire   [31:0] p_Result_3_3_fu_181_p4;
wire   [31:0] p_Result_3_4_fu_197_p4;
wire   [31:0] p_Result_3_5_fu_213_p4;
wire   [31:0] p_Result_3_6_fu_229_p4;
wire   [31:0] p_Result_3_7_fu_245_p4;
wire   [31:0] p_Result_3_8_fu_261_p4;
wire   [31:0] p_Result_3_9_fu_277_p4;
wire   [31:0] p_Result_3_s_fu_293_p4;
wire   [31:0] p_Result_3_10_fu_309_p4;
wire   [31:0] p_Result_3_11_fu_325_p4;
wire   [31:0] p_Result_3_12_fu_341_p4;
wire   [31:0] p_Result_3_13_fu_357_p4;
wire   [31:0] p_Result_3_14_fu_373_p4;
wire   [31:0] add_ln215_15_fu_383_p2;
wire   [31:0] add_ln215_14_fu_367_p2;
wire   [31:0] add_ln215_13_fu_351_p2;
wire   [31:0] add_ln215_12_fu_335_p2;
wire   [31:0] add_ln215_11_fu_319_p2;
wire   [31:0] add_ln215_10_fu_303_p2;
wire   [31:0] add_ln215_9_fu_287_p2;
wire   [31:0] add_ln215_8_fu_271_p2;
wire   [31:0] add_ln215_7_fu_255_p2;
wire   [31:0] add_ln215_6_fu_239_p2;
wire   [31:0] add_ln215_5_fu_223_p2;
wire   [31:0] add_ln215_4_fu_207_p2;
wire   [31:0] add_ln215_3_fu_191_p2;
wire   [31:0] add_ln215_2_fu_175_p2;
wire   [31:0] add_ln215_1_fu_159_p2;
wire   [31:0] add_ln215_fu_143_p2;
wire    ap_CS_fsm_state3;
reg   [2:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mac1_m_TDATA_blk_n = mac1_m_TREADY;
    end else begin
        mac1_m_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((mac1_m_TREADY == 1'b0) | (mac1_s_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        mac1_m_TVALID = 1'b1;
    end else begin
        mac1_m_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mac1_s_TDATA_blk_n = mac1_s_TVALID;
    end else begin
        mac1_s_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((mac1_m_TREADY == 1'b0) | (mac1_s_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        mac1_s_TREADY = 1'b1;
    end else begin
        mac1_s_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((mac1_m_TREADY == 1'b0) | (mac1_s_TVALID == 1'b0)) & (1'd0 == acc_last_V_fu_134_p1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((mac1_m_TREADY == 1'b0) | (mac1_s_TVALID == 1'b0)) & (1'd1 == acc_last_V_fu_134_p1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_last_V_fu_134_p1 = mac1_s_TLAST;

assign add_ln215_10_fu_303_p2 = (p_Result_3_s_fu_293_p4 + 32'd1);

assign add_ln215_11_fu_319_p2 = (p_Result_3_10_fu_309_p4 + 32'd1);

assign add_ln215_12_fu_335_p2 = (p_Result_3_11_fu_325_p4 + 32'd1);

assign add_ln215_13_fu_351_p2 = (p_Result_3_12_fu_341_p4 + 32'd1);

assign add_ln215_14_fu_367_p2 = (p_Result_3_13_fu_357_p4 + 32'd1);

assign add_ln215_15_fu_383_p2 = (p_Result_3_14_fu_373_p4 + 32'd1);

assign add_ln215_1_fu_159_p2 = (p_Result_3_1_fu_149_p4 + 32'd1);

assign add_ln215_2_fu_175_p2 = (p_Result_3_2_fu_165_p4 + 32'd1);

assign add_ln215_3_fu_191_p2 = (p_Result_3_3_fu_181_p4 + 32'd1);

assign add_ln215_4_fu_207_p2 = (p_Result_3_4_fu_197_p4 + 32'd1);

assign add_ln215_5_fu_223_p2 = (p_Result_3_5_fu_213_p4 + 32'd1);

assign add_ln215_6_fu_239_p2 = (p_Result_3_6_fu_229_p4 + 32'd1);

assign add_ln215_7_fu_255_p2 = (p_Result_3_7_fu_245_p4 + 32'd1);

assign add_ln215_8_fu_271_p2 = (p_Result_3_8_fu_261_p4 + 32'd1);

assign add_ln215_9_fu_287_p2 = (p_Result_3_9_fu_277_p4 + 32'd1);

assign add_ln215_fu_143_p2 = (trunc_ln674_fu_139_p1 + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state2 = ((mac1_m_TREADY == 1'b0) | (mac1_s_TVALID == 1'b0));
end

assign mac1_m_TDATA = {{{{{{{{{{{{{{{{add_ln215_15_fu_383_p2}, {add_ln215_14_fu_367_p2}}, {add_ln215_13_fu_351_p2}}, {add_ln215_12_fu_335_p2}}, {add_ln215_11_fu_319_p2}}, {add_ln215_10_fu_303_p2}}, {add_ln215_9_fu_287_p2}}, {add_ln215_8_fu_271_p2}}, {add_ln215_7_fu_255_p2}}, {add_ln215_6_fu_239_p2}}, {add_ln215_5_fu_223_p2}}, {add_ln215_4_fu_207_p2}}, {add_ln215_3_fu_191_p2}}, {add_ln215_2_fu_175_p2}}, {add_ln215_1_fu_159_p2}}, {add_ln215_fu_143_p2}};

assign mac1_m_TKEEP = mac1_s_TKEEP;

assign mac1_m_TLAST = mac1_s_TLAST;

assign p_Result_3_10_fu_309_p4 = {{mac1_s_TDATA[383:352]}};

assign p_Result_3_11_fu_325_p4 = {{mac1_s_TDATA[415:384]}};

assign p_Result_3_12_fu_341_p4 = {{mac1_s_TDATA[447:416]}};

assign p_Result_3_13_fu_357_p4 = {{mac1_s_TDATA[479:448]}};

assign p_Result_3_14_fu_373_p4 = {{mac1_s_TDATA[511:480]}};

assign p_Result_3_1_fu_149_p4 = {{mac1_s_TDATA[63:32]}};

assign p_Result_3_2_fu_165_p4 = {{mac1_s_TDATA[95:64]}};

assign p_Result_3_3_fu_181_p4 = {{mac1_s_TDATA[127:96]}};

assign p_Result_3_4_fu_197_p4 = {{mac1_s_TDATA[159:128]}};

assign p_Result_3_5_fu_213_p4 = {{mac1_s_TDATA[191:160]}};

assign p_Result_3_6_fu_229_p4 = {{mac1_s_TDATA[223:192]}};

assign p_Result_3_7_fu_245_p4 = {{mac1_s_TDATA[255:224]}};

assign p_Result_3_8_fu_261_p4 = {{mac1_s_TDATA[287:256]}};

assign p_Result_3_9_fu_277_p4 = {{mac1_s_TDATA[319:288]}};

assign p_Result_3_s_fu_293_p4 = {{mac1_s_TDATA[351:320]}};

assign trunc_ln674_fu_139_p1 = mac1_s_TDATA[31:0];

endmodule //rtl_kernel_wizard_1_example_stream_plus1_512_512_s
