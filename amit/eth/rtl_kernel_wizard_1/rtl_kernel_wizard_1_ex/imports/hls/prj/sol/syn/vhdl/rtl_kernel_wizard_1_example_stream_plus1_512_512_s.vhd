-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rtl_kernel_wizard_1_example_stream_plus1_512_512_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mac1_s_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    mac1_s_TVALID : IN STD_LOGIC;
    mac1_s_TREADY : OUT STD_LOGIC;
    mac1_s_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    mac1_s_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    mac1_m_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    mac1_m_TVALID : OUT STD_LOGIC;
    mac1_m_TREADY : IN STD_LOGIC;
    mac1_m_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    mac1_m_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of rtl_kernel_wizard_1_example_stream_plus1_512_512_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mac1_s_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mac1_m_TDATA_blk_n : STD_LOGIC;
    signal ap_block_state2 : BOOLEAN;
    signal acc_last_V_fu_134_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln674_fu_139_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_1_fu_149_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_2_fu_165_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_3_fu_181_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_4_fu_197_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_5_fu_213_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_6_fu_229_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_7_fu_245_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_8_fu_261_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_9_fu_277_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_s_fu_293_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_10_fu_309_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_11_fu_325_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_12_fu_341_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_13_fu_357_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_14_fu_373_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_15_fu_383_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_14_fu_367_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_13_fu_351_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_12_fu_335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_11_fu_319_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_10_fu_303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_9_fu_287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_8_fu_271_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_7_fu_255_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_6_fu_239_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_5_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_4_fu_207_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_3_fu_191_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_2_fu_175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_1_fu_159_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln215_fu_143_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, mac1_s_TVALID, mac1_m_TREADY, ap_CS_fsm_state2, acc_last_V_fu_134_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((mac1_m_TREADY = ap_const_logic_0) or (mac1_s_TVALID = ap_const_logic_0))) and (ap_const_lv1_0 = acc_last_V_fu_134_p1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((mac1_m_TREADY = ap_const_logic_0) or (mac1_s_TVALID = ap_const_logic_0))) and (ap_const_lv1_1 = acc_last_V_fu_134_p1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    acc_last_V_fu_134_p1 <= mac1_s_TLAST;
    add_ln215_10_fu_303_p2 <= std_logic_vector(unsigned(p_Result_3_s_fu_293_p4) + unsigned(ap_const_lv32_1));
    add_ln215_11_fu_319_p2 <= std_logic_vector(unsigned(p_Result_3_10_fu_309_p4) + unsigned(ap_const_lv32_1));
    add_ln215_12_fu_335_p2 <= std_logic_vector(unsigned(p_Result_3_11_fu_325_p4) + unsigned(ap_const_lv32_1));
    add_ln215_13_fu_351_p2 <= std_logic_vector(unsigned(p_Result_3_12_fu_341_p4) + unsigned(ap_const_lv32_1));
    add_ln215_14_fu_367_p2 <= std_logic_vector(unsigned(p_Result_3_13_fu_357_p4) + unsigned(ap_const_lv32_1));
    add_ln215_15_fu_383_p2 <= std_logic_vector(unsigned(p_Result_3_14_fu_373_p4) + unsigned(ap_const_lv32_1));
    add_ln215_1_fu_159_p2 <= std_logic_vector(unsigned(p_Result_3_1_fu_149_p4) + unsigned(ap_const_lv32_1));
    add_ln215_2_fu_175_p2 <= std_logic_vector(unsigned(p_Result_3_2_fu_165_p4) + unsigned(ap_const_lv32_1));
    add_ln215_3_fu_191_p2 <= std_logic_vector(unsigned(p_Result_3_3_fu_181_p4) + unsigned(ap_const_lv32_1));
    add_ln215_4_fu_207_p2 <= std_logic_vector(unsigned(p_Result_3_4_fu_197_p4) + unsigned(ap_const_lv32_1));
    add_ln215_5_fu_223_p2 <= std_logic_vector(unsigned(p_Result_3_5_fu_213_p4) + unsigned(ap_const_lv32_1));
    add_ln215_6_fu_239_p2 <= std_logic_vector(unsigned(p_Result_3_6_fu_229_p4) + unsigned(ap_const_lv32_1));
    add_ln215_7_fu_255_p2 <= std_logic_vector(unsigned(p_Result_3_7_fu_245_p4) + unsigned(ap_const_lv32_1));
    add_ln215_8_fu_271_p2 <= std_logic_vector(unsigned(p_Result_3_8_fu_261_p4) + unsigned(ap_const_lv32_1));
    add_ln215_9_fu_287_p2 <= std_logic_vector(unsigned(p_Result_3_9_fu_277_p4) + unsigned(ap_const_lv32_1));
    add_ln215_fu_143_p2 <= std_logic_vector(unsigned(trunc_ln674_fu_139_p1) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state2_assign_proc : process(mac1_s_TVALID, mac1_m_TREADY)
    begin
                ap_block_state2 <= ((mac1_m_TREADY = ap_const_logic_0) or (mac1_s_TVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    mac1_m_TDATA <= (((((((((((((((add_ln215_15_fu_383_p2 & add_ln215_14_fu_367_p2) & add_ln215_13_fu_351_p2) & add_ln215_12_fu_335_p2) & add_ln215_11_fu_319_p2) & add_ln215_10_fu_303_p2) & add_ln215_9_fu_287_p2) & add_ln215_8_fu_271_p2) & add_ln215_7_fu_255_p2) & add_ln215_6_fu_239_p2) & add_ln215_5_fu_223_p2) & add_ln215_4_fu_207_p2) & add_ln215_3_fu_191_p2) & add_ln215_2_fu_175_p2) & add_ln215_1_fu_159_p2) & add_ln215_fu_143_p2);

    mac1_m_TDATA_blk_n_assign_proc : process(mac1_m_TREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mac1_m_TDATA_blk_n <= mac1_m_TREADY;
        else 
            mac1_m_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mac1_m_TKEEP <= mac1_s_TKEEP;
    mac1_m_TLAST <= mac1_s_TLAST;

    mac1_m_TVALID_assign_proc : process(mac1_s_TVALID, mac1_m_TREADY, ap_CS_fsm_state2)
    begin
        if ((not(((mac1_m_TREADY = ap_const_logic_0) or (mac1_s_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mac1_m_TVALID <= ap_const_logic_1;
        else 
            mac1_m_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    mac1_s_TDATA_blk_n_assign_proc : process(mac1_s_TVALID, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mac1_s_TDATA_blk_n <= mac1_s_TVALID;
        else 
            mac1_s_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mac1_s_TREADY_assign_proc : process(mac1_s_TVALID, mac1_m_TREADY, ap_CS_fsm_state2)
    begin
        if ((not(((mac1_m_TREADY = ap_const_logic_0) or (mac1_s_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mac1_s_TREADY <= ap_const_logic_1;
        else 
            mac1_s_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_3_10_fu_309_p4 <= mac1_s_TDATA(383 downto 352);
    p_Result_3_11_fu_325_p4 <= mac1_s_TDATA(415 downto 384);
    p_Result_3_12_fu_341_p4 <= mac1_s_TDATA(447 downto 416);
    p_Result_3_13_fu_357_p4 <= mac1_s_TDATA(479 downto 448);
    p_Result_3_14_fu_373_p4 <= mac1_s_TDATA(511 downto 480);
    p_Result_3_1_fu_149_p4 <= mac1_s_TDATA(63 downto 32);
    p_Result_3_2_fu_165_p4 <= mac1_s_TDATA(95 downto 64);
    p_Result_3_3_fu_181_p4 <= mac1_s_TDATA(127 downto 96);
    p_Result_3_4_fu_197_p4 <= mac1_s_TDATA(159 downto 128);
    p_Result_3_5_fu_213_p4 <= mac1_s_TDATA(191 downto 160);
    p_Result_3_6_fu_229_p4 <= mac1_s_TDATA(223 downto 192);
    p_Result_3_7_fu_245_p4 <= mac1_s_TDATA(255 downto 224);
    p_Result_3_8_fu_261_p4 <= mac1_s_TDATA(287 downto 256);
    p_Result_3_9_fu_277_p4 <= mac1_s_TDATA(319 downto 288);
    p_Result_3_s_fu_293_p4 <= mac1_s_TDATA(351 downto 320);
    trunc_ln674_fu_139_p1 <= mac1_s_TDATA(32 - 1 downto 0);
end behav;
