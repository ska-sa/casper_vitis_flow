-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rtl_kernel_wizard_1 is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    mac0_m_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    mac0_m_TVALID : OUT STD_LOGIC;
    mac0_m_TREADY : IN STD_LOGIC;
    mac0_m_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    mac0_m_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    mac0_s_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    mac0_s_TVALID : IN STD_LOGIC;
    mac0_s_TREADY : OUT STD_LOGIC;
    mac0_s_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    mac0_s_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    mac1_m_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    mac1_m_TVALID : OUT STD_LOGIC;
    mac1_m_TREADY : IN STD_LOGIC;
    mac1_m_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    mac1_m_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    mac1_s_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    mac1_s_TVALID : IN STD_LOGIC;
    mac1_s_TREADY : OUT STD_LOGIC;
    mac1_s_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    mac1_s_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of rtl_kernel_wizard_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "rtl_kernel_wizard_1_rtl_kernel_wizard_1,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.267000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=51,HLS_SYN_LUT=1420,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal grp_example_stream_plus1_512_512_s_fu_50_ap_start : STD_LOGIC;
    signal grp_example_stream_plus1_512_512_s_fu_50_ap_done : STD_LOGIC;
    signal grp_example_stream_plus1_512_512_s_fu_50_ap_idle : STD_LOGIC;
    signal grp_example_stream_plus1_512_512_s_fu_50_ap_ready : STD_LOGIC;
    signal grp_example_stream_plus1_512_512_s_fu_50_mac1_s_TREADY : STD_LOGIC;
    signal grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TVALID : STD_LOGIC;
    signal grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TREADY : STD_LOGIC;
    signal grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_example_stream_plus1_512_512_s_fu_66_ap_start : STD_LOGIC;
    signal grp_example_stream_plus1_512_512_s_fu_66_ap_done : STD_LOGIC;
    signal grp_example_stream_plus1_512_512_s_fu_66_ap_idle : STD_LOGIC;
    signal grp_example_stream_plus1_512_512_s_fu_66_ap_ready : STD_LOGIC;
    signal grp_example_stream_plus1_512_512_s_fu_66_mac1_s_TREADY : STD_LOGIC;
    signal grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TVALID : STD_LOGIC;
    signal grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TREADY : STD_LOGIC;
    signal grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_example_stream_plus1_512_512_s_fu_50_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_example_stream_plus1_512_512_s_fu_66_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal regslice_both_mac0_m_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_mac1_m_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state4 : BOOLEAN;
    signal mac0_m_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_mac0_m_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_mac0_m_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_mac0_m_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_mac0_m_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_mac0_m_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_mac0_m_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_mac0_m_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_mac0_s_V_data_V_U_apdone_blk : STD_LOGIC;
    signal mac0_s_TDATA_int_regslice : STD_LOGIC_VECTOR (511 downto 0);
    signal mac0_s_TVALID_int_regslice : STD_LOGIC;
    signal mac0_s_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_mac0_s_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_mac0_s_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal mac0_s_TKEEP_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_mac0_s_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_mac0_s_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_mac0_s_V_last_V_U_apdone_blk : STD_LOGIC;
    signal mac0_s_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_mac0_s_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_mac0_s_V_last_V_U_ack_in : STD_LOGIC;
    signal mac1_m_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_mac1_m_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_mac1_m_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_mac1_m_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_mac1_m_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_mac1_m_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_mac1_m_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_mac1_m_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_mac1_s_V_data_V_U_apdone_blk : STD_LOGIC;
    signal mac1_s_TDATA_int_regslice : STD_LOGIC_VECTOR (511 downto 0);
    signal mac1_s_TVALID_int_regslice : STD_LOGIC;
    signal mac1_s_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_mac1_s_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_mac1_s_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal mac1_s_TKEEP_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_mac1_s_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_mac1_s_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_mac1_s_V_last_V_U_apdone_blk : STD_LOGIC;
    signal mac1_s_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_mac1_s_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_mac1_s_V_last_V_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component rtl_kernel_wizard_1_example_stream_plus1_512_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        mac1_s_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        mac1_s_TVALID : IN STD_LOGIC;
        mac1_s_TREADY : OUT STD_LOGIC;
        mac1_s_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
        mac1_s_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        mac1_m_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        mac1_m_TVALID : OUT STD_LOGIC;
        mac1_m_TREADY : IN STD_LOGIC;
        mac1_m_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
        mac1_m_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component rtl_kernel_wizard_1_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC );
    end component;


    component rtl_kernel_wizard_1_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component rtl_kernel_wizard_1_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1);

    grp_example_stream_plus1_512_512_s_fu_50 : component rtl_kernel_wizard_1_example_stream_plus1_512_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_example_stream_plus1_512_512_s_fu_50_ap_start,
        ap_done => grp_example_stream_plus1_512_512_s_fu_50_ap_done,
        ap_idle => grp_example_stream_plus1_512_512_s_fu_50_ap_idle,
        ap_ready => grp_example_stream_plus1_512_512_s_fu_50_ap_ready,
        mac1_s_TDATA => mac0_s_TDATA_int_regslice,
        mac1_s_TVALID => mac0_s_TVALID_int_regslice,
        mac1_s_TREADY => grp_example_stream_plus1_512_512_s_fu_50_mac1_s_TREADY,
        mac1_s_TKEEP => mac0_s_TKEEP_int_regslice,
        mac1_s_TLAST => mac0_s_TLAST_int_regslice,
        mac1_m_TDATA => grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TDATA,
        mac1_m_TVALID => grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TVALID,
        mac1_m_TREADY => grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TREADY,
        mac1_m_TKEEP => grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TKEEP,
        mac1_m_TLAST => grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TLAST);

    grp_example_stream_plus1_512_512_s_fu_66 : component rtl_kernel_wizard_1_example_stream_plus1_512_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_example_stream_plus1_512_512_s_fu_66_ap_start,
        ap_done => grp_example_stream_plus1_512_512_s_fu_66_ap_done,
        ap_idle => grp_example_stream_plus1_512_512_s_fu_66_ap_idle,
        ap_ready => grp_example_stream_plus1_512_512_s_fu_66_ap_ready,
        mac1_s_TDATA => mac1_s_TDATA_int_regslice,
        mac1_s_TVALID => mac1_s_TVALID_int_regslice,
        mac1_s_TREADY => grp_example_stream_plus1_512_512_s_fu_66_mac1_s_TREADY,
        mac1_s_TKEEP => mac1_s_TKEEP_int_regslice,
        mac1_s_TLAST => mac1_s_TLAST_int_regslice,
        mac1_m_TDATA => grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TDATA,
        mac1_m_TVALID => grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TVALID,
        mac1_m_TREADY => grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TREADY,
        mac1_m_TKEEP => grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TKEEP,
        mac1_m_TLAST => grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TLAST);

    regslice_both_mac0_m_V_data_V_U : component rtl_kernel_wizard_1_regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TDATA,
        vld_in => grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TVALID,
        ack_in => mac0_m_TREADY_int_regslice,
        data_out => mac0_m_TDATA,
        vld_out => regslice_both_mac0_m_V_data_V_U_vld_out,
        ack_out => mac0_m_TREADY,
        apdone_blk => regslice_both_mac0_m_V_data_V_U_apdone_blk);

    regslice_both_mac0_m_V_keep_V_U : component rtl_kernel_wizard_1_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TKEEP,
        vld_in => grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TVALID,
        ack_in => regslice_both_mac0_m_V_keep_V_U_ack_in_dummy,
        data_out => mac0_m_TKEEP,
        vld_out => regslice_both_mac0_m_V_keep_V_U_vld_out,
        ack_out => mac0_m_TREADY,
        apdone_blk => regslice_both_mac0_m_V_keep_V_U_apdone_blk);

    regslice_both_mac0_m_V_last_V_U : component rtl_kernel_wizard_1_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TLAST,
        vld_in => grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TVALID,
        ack_in => regslice_both_mac0_m_V_last_V_U_ack_in_dummy,
        data_out => mac0_m_TLAST,
        vld_out => regslice_both_mac0_m_V_last_V_U_vld_out,
        ack_out => mac0_m_TREADY,
        apdone_blk => regslice_both_mac0_m_V_last_V_U_apdone_blk);

    regslice_both_mac0_s_V_data_V_U : component rtl_kernel_wizard_1_regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => mac0_s_TDATA,
        vld_in => mac0_s_TVALID,
        ack_in => regslice_both_mac0_s_V_data_V_U_ack_in,
        data_out => mac0_s_TDATA_int_regslice,
        vld_out => mac0_s_TVALID_int_regslice,
        ack_out => mac0_s_TREADY_int_regslice,
        apdone_blk => regslice_both_mac0_s_V_data_V_U_apdone_blk);

    regslice_both_mac0_s_V_keep_V_U : component rtl_kernel_wizard_1_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => mac0_s_TKEEP,
        vld_in => mac0_s_TVALID,
        ack_in => regslice_both_mac0_s_V_keep_V_U_ack_in,
        data_out => mac0_s_TKEEP_int_regslice,
        vld_out => regslice_both_mac0_s_V_keep_V_U_vld_out,
        ack_out => mac0_s_TREADY_int_regslice,
        apdone_blk => regslice_both_mac0_s_V_keep_V_U_apdone_blk);

    regslice_both_mac0_s_V_last_V_U : component rtl_kernel_wizard_1_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => mac0_s_TLAST,
        vld_in => mac0_s_TVALID,
        ack_in => regslice_both_mac0_s_V_last_V_U_ack_in,
        data_out => mac0_s_TLAST_int_regslice,
        vld_out => regslice_both_mac0_s_V_last_V_U_vld_out,
        ack_out => mac0_s_TREADY_int_regslice,
        apdone_blk => regslice_both_mac0_s_V_last_V_U_apdone_blk);

    regslice_both_mac1_m_V_data_V_U : component rtl_kernel_wizard_1_regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TDATA,
        vld_in => grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TVALID,
        ack_in => mac1_m_TREADY_int_regslice,
        data_out => mac1_m_TDATA,
        vld_out => regslice_both_mac1_m_V_data_V_U_vld_out,
        ack_out => mac1_m_TREADY,
        apdone_blk => regslice_both_mac1_m_V_data_V_U_apdone_blk);

    regslice_both_mac1_m_V_keep_V_U : component rtl_kernel_wizard_1_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TKEEP,
        vld_in => grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TVALID,
        ack_in => regslice_both_mac1_m_V_keep_V_U_ack_in_dummy,
        data_out => mac1_m_TKEEP,
        vld_out => regslice_both_mac1_m_V_keep_V_U_vld_out,
        ack_out => mac1_m_TREADY,
        apdone_blk => regslice_both_mac1_m_V_keep_V_U_apdone_blk);

    regslice_both_mac1_m_V_last_V_U : component rtl_kernel_wizard_1_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TLAST,
        vld_in => grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TVALID,
        ack_in => regslice_both_mac1_m_V_last_V_U_ack_in_dummy,
        data_out => mac1_m_TLAST,
        vld_out => regslice_both_mac1_m_V_last_V_U_vld_out,
        ack_out => mac1_m_TREADY,
        apdone_blk => regslice_both_mac1_m_V_last_V_U_apdone_blk);

    regslice_both_mac1_s_V_data_V_U : component rtl_kernel_wizard_1_regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => mac1_s_TDATA,
        vld_in => mac1_s_TVALID,
        ack_in => regslice_both_mac1_s_V_data_V_U_ack_in,
        data_out => mac1_s_TDATA_int_regslice,
        vld_out => mac1_s_TVALID_int_regslice,
        ack_out => mac1_s_TREADY_int_regslice,
        apdone_blk => regslice_both_mac1_s_V_data_V_U_apdone_blk);

    regslice_both_mac1_s_V_keep_V_U : component rtl_kernel_wizard_1_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => mac1_s_TKEEP,
        vld_in => mac1_s_TVALID,
        ack_in => regslice_both_mac1_s_V_keep_V_U_ack_in,
        data_out => mac1_s_TKEEP_int_regslice,
        vld_out => regslice_both_mac1_s_V_keep_V_U_vld_out,
        ack_out => mac1_s_TREADY_int_regslice,
        apdone_blk => regslice_both_mac1_s_V_keep_V_U_apdone_blk);

    regslice_both_mac1_s_V_last_V_U : component rtl_kernel_wizard_1_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => mac1_s_TLAST,
        vld_in => mac1_s_TVALID,
        ack_in => regslice_both_mac1_s_V_last_V_U_ack_in,
        data_out => mac1_s_TLAST_int_regslice,
        vld_out => regslice_both_mac1_s_V_last_V_U_vld_out,
        ack_out => mac1_s_TREADY_int_regslice,
        apdone_blk => regslice_both_mac1_s_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_example_stream_plus1_512_512_s_fu_50_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_example_stream_plus1_512_512_s_fu_50_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_example_stream_plus1_512_512_s_fu_50_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_example_stream_plus1_512_512_s_fu_50_ap_ready = ap_const_logic_1)) then 
                    grp_example_stream_plus1_512_512_s_fu_50_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_example_stream_plus1_512_512_s_fu_66_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_example_stream_plus1_512_512_s_fu_66_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_example_stream_plus1_512_512_s_fu_66_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_example_stream_plus1_512_512_s_fu_66_ap_ready = ap_const_logic_1)) then 
                    grp_example_stream_plus1_512_512_s_fu_66_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state3, ap_block_state3_on_subcall_done, ap_CS_fsm_state4, regslice_both_mac0_m_V_data_V_U_apdone_blk, regslice_both_mac1_m_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((regslice_both_mac1_m_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_mac0_m_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state3_on_subcall_done_assign_proc : process(grp_example_stream_plus1_512_512_s_fu_50_ap_done, grp_example_stream_plus1_512_512_s_fu_66_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((grp_example_stream_plus1_512_512_s_fu_66_ap_done = ap_const_logic_0) or (grp_example_stream_plus1_512_512_s_fu_50_ap_done = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(regslice_both_mac0_m_V_data_V_U_apdone_blk, regslice_both_mac1_m_V_data_V_U_apdone_blk)
    begin
                ap_block_state4 <= ((regslice_both_mac1_m_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_mac0_m_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;

    grp_example_stream_plus1_512_512_s_fu_50_ap_start <= grp_example_stream_plus1_512_512_s_fu_50_ap_start_reg;
    grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TREADY <= (mac0_m_TREADY_int_regslice and ap_CS_fsm_state3);
    grp_example_stream_plus1_512_512_s_fu_66_ap_start <= grp_example_stream_plus1_512_512_s_fu_66_ap_start_reg;
    grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TREADY <= (mac1_m_TREADY_int_regslice and ap_CS_fsm_state3);
    mac0_m_TVALID <= regslice_both_mac0_m_V_data_V_U_vld_out;
    mac0_s_TREADY <= regslice_both_mac0_s_V_data_V_U_ack_in;

    mac0_s_TREADY_int_regslice_assign_proc : process(grp_example_stream_plus1_512_512_s_fu_50_mac1_s_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mac0_s_TREADY_int_regslice <= grp_example_stream_plus1_512_512_s_fu_50_mac1_s_TREADY;
        else 
            mac0_s_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    mac1_m_TVALID <= regslice_both_mac1_m_V_data_V_U_vld_out;
    mac1_s_TREADY <= regslice_both_mac1_s_V_data_V_U_ack_in;

    mac1_s_TREADY_int_regslice_assign_proc : process(grp_example_stream_plus1_512_512_s_fu_66_mac1_s_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mac1_s_TREADY_int_regslice <= grp_example_stream_plus1_512_512_s_fu_66_mac1_s_TREADY;
        else 
            mac1_s_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

end behav;
