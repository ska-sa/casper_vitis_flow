// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="rtl_kernel_wizard_1_rtl_kernel_wizard_1,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.267000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=51,HLS_SYN_LUT=1420,HLS_VERSION=2020_2}" *)

module rtl_kernel_wizard_1 (
        ap_clk,
        ap_rst_n,
        mac0_m_TDATA,
        mac0_m_TVALID,
        mac0_m_TREADY,
        mac0_m_TKEEP,
        mac0_m_TLAST,
        mac0_s_TDATA,
        mac0_s_TVALID,
        mac0_s_TREADY,
        mac0_s_TKEEP,
        mac0_s_TLAST,
        mac1_m_TDATA,
        mac1_m_TVALID,
        mac1_m_TREADY,
        mac1_m_TKEEP,
        mac1_m_TLAST,
        mac1_s_TDATA,
        mac1_s_TVALID,
        mac1_s_TREADY,
        mac1_s_TKEEP,
        mac1_s_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [511:0] mac0_m_TDATA;
output   mac0_m_TVALID;
input   mac0_m_TREADY;
output  [63:0] mac0_m_TKEEP;
output  [0:0] mac0_m_TLAST;
input  [511:0] mac0_s_TDATA;
input   mac0_s_TVALID;
output   mac0_s_TREADY;
input  [63:0] mac0_s_TKEEP;
input  [0:0] mac0_s_TLAST;
output  [511:0] mac1_m_TDATA;
output   mac1_m_TVALID;
input   mac1_m_TREADY;
output  [63:0] mac1_m_TKEEP;
output  [0:0] mac1_m_TLAST;
input  [511:0] mac1_s_TDATA;
input   mac1_s_TVALID;
output   mac1_s_TREADY;
input  [63:0] mac1_s_TKEEP;
input  [0:0] mac1_s_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    grp_example_stream_plus1_512_512_s_fu_50_ap_start;
wire    grp_example_stream_plus1_512_512_s_fu_50_ap_done;
wire    grp_example_stream_plus1_512_512_s_fu_50_ap_idle;
wire    grp_example_stream_plus1_512_512_s_fu_50_ap_ready;
wire    grp_example_stream_plus1_512_512_s_fu_50_mac1_s_TREADY;
wire   [511:0] grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TDATA;
wire    grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TVALID;
wire    grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TREADY;
wire   [63:0] grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TKEEP;
wire   [0:0] grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TLAST;
wire    grp_example_stream_plus1_512_512_s_fu_66_ap_start;
wire    grp_example_stream_plus1_512_512_s_fu_66_ap_done;
wire    grp_example_stream_plus1_512_512_s_fu_66_ap_idle;
wire    grp_example_stream_plus1_512_512_s_fu_66_ap_ready;
wire    grp_example_stream_plus1_512_512_s_fu_66_mac1_s_TREADY;
wire   [511:0] grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TDATA;
wire    grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TVALID;
wire    grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TREADY;
wire   [63:0] grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TKEEP;
wire   [0:0] grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TLAST;
reg    grp_example_stream_plus1_512_512_s_fu_50_ap_start_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    grp_example_stream_plus1_512_512_s_fu_66_ap_start_reg;
reg   [3:0] ap_NS_fsm;
reg    ap_block_state3_on_subcall_done;
wire    ap_CS_fsm_state4;
wire    regslice_both_mac0_m_V_data_V_U_apdone_blk;
wire    regslice_both_mac1_m_V_data_V_U_apdone_blk;
reg    ap_block_state4;
wire    mac0_m_TREADY_int_regslice;
wire    regslice_both_mac0_m_V_data_V_U_vld_out;
wire    regslice_both_mac0_m_V_keep_V_U_apdone_blk;
wire    regslice_both_mac0_m_V_keep_V_U_ack_in_dummy;
wire    regslice_both_mac0_m_V_keep_V_U_vld_out;
wire    regslice_both_mac0_m_V_last_V_U_apdone_blk;
wire    regslice_both_mac0_m_V_last_V_U_ack_in_dummy;
wire    regslice_both_mac0_m_V_last_V_U_vld_out;
wire    regslice_both_mac0_s_V_data_V_U_apdone_blk;
wire   [511:0] mac0_s_TDATA_int_regslice;
wire    mac0_s_TVALID_int_regslice;
reg    mac0_s_TREADY_int_regslice;
wire    regslice_both_mac0_s_V_data_V_U_ack_in;
wire    regslice_both_mac0_s_V_keep_V_U_apdone_blk;
wire   [63:0] mac0_s_TKEEP_int_regslice;
wire    regslice_both_mac0_s_V_keep_V_U_vld_out;
wire    regslice_both_mac0_s_V_keep_V_U_ack_in;
wire    regslice_both_mac0_s_V_last_V_U_apdone_blk;
wire   [0:0] mac0_s_TLAST_int_regslice;
wire    regslice_both_mac0_s_V_last_V_U_vld_out;
wire    regslice_both_mac0_s_V_last_V_U_ack_in;
wire    mac1_m_TREADY_int_regslice;
wire    regslice_both_mac1_m_V_data_V_U_vld_out;
wire    regslice_both_mac1_m_V_keep_V_U_apdone_blk;
wire    regslice_both_mac1_m_V_keep_V_U_ack_in_dummy;
wire    regslice_both_mac1_m_V_keep_V_U_vld_out;
wire    regslice_both_mac1_m_V_last_V_U_apdone_blk;
wire    regslice_both_mac1_m_V_last_V_U_ack_in_dummy;
wire    regslice_both_mac1_m_V_last_V_U_vld_out;
wire    regslice_both_mac1_s_V_data_V_U_apdone_blk;
wire   [511:0] mac1_s_TDATA_int_regslice;
wire    mac1_s_TVALID_int_regslice;
reg    mac1_s_TREADY_int_regslice;
wire    regslice_both_mac1_s_V_data_V_U_ack_in;
wire    regslice_both_mac1_s_V_keep_V_U_apdone_blk;
wire   [63:0] mac1_s_TKEEP_int_regslice;
wire    regslice_both_mac1_s_V_keep_V_U_vld_out;
wire    regslice_both_mac1_s_V_keep_V_U_ack_in;
wire    regslice_both_mac1_s_V_last_V_U_apdone_blk;
wire   [0:0] mac1_s_TLAST_int_regslice;
wire    regslice_both_mac1_s_V_last_V_U_vld_out;
wire    regslice_both_mac1_s_V_last_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 grp_example_stream_plus1_512_512_s_fu_50_ap_start_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_example_stream_plus1_512_512_s_fu_66_ap_start_reg = 1'b0;
end

rtl_kernel_wizard_1_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1)
);

rtl_kernel_wizard_1_example_stream_plus1_512_512_s grp_example_stream_plus1_512_512_s_fu_50(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_example_stream_plus1_512_512_s_fu_50_ap_start),
    .ap_done(grp_example_stream_plus1_512_512_s_fu_50_ap_done),
    .ap_idle(grp_example_stream_plus1_512_512_s_fu_50_ap_idle),
    .ap_ready(grp_example_stream_plus1_512_512_s_fu_50_ap_ready),
    .mac1_s_TDATA(mac0_s_TDATA_int_regslice),
    .mac1_s_TVALID(mac0_s_TVALID_int_regslice),
    .mac1_s_TREADY(grp_example_stream_plus1_512_512_s_fu_50_mac1_s_TREADY),
    .mac1_s_TKEEP(mac0_s_TKEEP_int_regslice),
    .mac1_s_TLAST(mac0_s_TLAST_int_regslice),
    .mac1_m_TDATA(grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TDATA),
    .mac1_m_TVALID(grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TVALID),
    .mac1_m_TREADY(grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TREADY),
    .mac1_m_TKEEP(grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TKEEP),
    .mac1_m_TLAST(grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TLAST)
);

rtl_kernel_wizard_1_example_stream_plus1_512_512_s grp_example_stream_plus1_512_512_s_fu_66(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_example_stream_plus1_512_512_s_fu_66_ap_start),
    .ap_done(grp_example_stream_plus1_512_512_s_fu_66_ap_done),
    .ap_idle(grp_example_stream_plus1_512_512_s_fu_66_ap_idle),
    .ap_ready(grp_example_stream_plus1_512_512_s_fu_66_ap_ready),
    .mac1_s_TDATA(mac1_s_TDATA_int_regslice),
    .mac1_s_TVALID(mac1_s_TVALID_int_regslice),
    .mac1_s_TREADY(grp_example_stream_plus1_512_512_s_fu_66_mac1_s_TREADY),
    .mac1_s_TKEEP(mac1_s_TKEEP_int_regslice),
    .mac1_s_TLAST(mac1_s_TLAST_int_regslice),
    .mac1_m_TDATA(grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TDATA),
    .mac1_m_TVALID(grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TVALID),
    .mac1_m_TREADY(grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TREADY),
    .mac1_m_TKEEP(grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TKEEP),
    .mac1_m_TLAST(grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TLAST)
);

rtl_kernel_wizard_1_regslice_both #(
    .DataWidth( 512 ))
regslice_both_mac0_m_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TDATA),
    .vld_in(grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TVALID),
    .ack_in(mac0_m_TREADY_int_regslice),
    .data_out(mac0_m_TDATA),
    .vld_out(regslice_both_mac0_m_V_data_V_U_vld_out),
    .ack_out(mac0_m_TREADY),
    .apdone_blk(regslice_both_mac0_m_V_data_V_U_apdone_blk)
);

rtl_kernel_wizard_1_regslice_both #(
    .DataWidth( 64 ))
regslice_both_mac0_m_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TKEEP),
    .vld_in(grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TVALID),
    .ack_in(regslice_both_mac0_m_V_keep_V_U_ack_in_dummy),
    .data_out(mac0_m_TKEEP),
    .vld_out(regslice_both_mac0_m_V_keep_V_U_vld_out),
    .ack_out(mac0_m_TREADY),
    .apdone_blk(regslice_both_mac0_m_V_keep_V_U_apdone_blk)
);

rtl_kernel_wizard_1_regslice_both #(
    .DataWidth( 1 ))
regslice_both_mac0_m_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TLAST),
    .vld_in(grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TVALID),
    .ack_in(regslice_both_mac0_m_V_last_V_U_ack_in_dummy),
    .data_out(mac0_m_TLAST),
    .vld_out(regslice_both_mac0_m_V_last_V_U_vld_out),
    .ack_out(mac0_m_TREADY),
    .apdone_blk(regslice_both_mac0_m_V_last_V_U_apdone_blk)
);

rtl_kernel_wizard_1_regslice_both #(
    .DataWidth( 512 ))
regslice_both_mac0_s_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(mac0_s_TDATA),
    .vld_in(mac0_s_TVALID),
    .ack_in(regslice_both_mac0_s_V_data_V_U_ack_in),
    .data_out(mac0_s_TDATA_int_regslice),
    .vld_out(mac0_s_TVALID_int_regslice),
    .ack_out(mac0_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_mac0_s_V_data_V_U_apdone_blk)
);

rtl_kernel_wizard_1_regslice_both #(
    .DataWidth( 64 ))
regslice_both_mac0_s_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(mac0_s_TKEEP),
    .vld_in(mac0_s_TVALID),
    .ack_in(regslice_both_mac0_s_V_keep_V_U_ack_in),
    .data_out(mac0_s_TKEEP_int_regslice),
    .vld_out(regslice_both_mac0_s_V_keep_V_U_vld_out),
    .ack_out(mac0_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_mac0_s_V_keep_V_U_apdone_blk)
);

rtl_kernel_wizard_1_regslice_both #(
    .DataWidth( 1 ))
regslice_both_mac0_s_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(mac0_s_TLAST),
    .vld_in(mac0_s_TVALID),
    .ack_in(regslice_both_mac0_s_V_last_V_U_ack_in),
    .data_out(mac0_s_TLAST_int_regslice),
    .vld_out(regslice_both_mac0_s_V_last_V_U_vld_out),
    .ack_out(mac0_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_mac0_s_V_last_V_U_apdone_blk)
);

rtl_kernel_wizard_1_regslice_both #(
    .DataWidth( 512 ))
regslice_both_mac1_m_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TDATA),
    .vld_in(grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TVALID),
    .ack_in(mac1_m_TREADY_int_regslice),
    .data_out(mac1_m_TDATA),
    .vld_out(regslice_both_mac1_m_V_data_V_U_vld_out),
    .ack_out(mac1_m_TREADY),
    .apdone_blk(regslice_both_mac1_m_V_data_V_U_apdone_blk)
);

rtl_kernel_wizard_1_regslice_both #(
    .DataWidth( 64 ))
regslice_both_mac1_m_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TKEEP),
    .vld_in(grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TVALID),
    .ack_in(regslice_both_mac1_m_V_keep_V_U_ack_in_dummy),
    .data_out(mac1_m_TKEEP),
    .vld_out(regslice_both_mac1_m_V_keep_V_U_vld_out),
    .ack_out(mac1_m_TREADY),
    .apdone_blk(regslice_both_mac1_m_V_keep_V_U_apdone_blk)
);

rtl_kernel_wizard_1_regslice_both #(
    .DataWidth( 1 ))
regslice_both_mac1_m_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TLAST),
    .vld_in(grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TVALID),
    .ack_in(regslice_both_mac1_m_V_last_V_U_ack_in_dummy),
    .data_out(mac1_m_TLAST),
    .vld_out(regslice_both_mac1_m_V_last_V_U_vld_out),
    .ack_out(mac1_m_TREADY),
    .apdone_blk(regslice_both_mac1_m_V_last_V_U_apdone_blk)
);

rtl_kernel_wizard_1_regslice_both #(
    .DataWidth( 512 ))
regslice_both_mac1_s_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(mac1_s_TDATA),
    .vld_in(mac1_s_TVALID),
    .ack_in(regslice_both_mac1_s_V_data_V_U_ack_in),
    .data_out(mac1_s_TDATA_int_regslice),
    .vld_out(mac1_s_TVALID_int_regslice),
    .ack_out(mac1_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_mac1_s_V_data_V_U_apdone_blk)
);

rtl_kernel_wizard_1_regslice_both #(
    .DataWidth( 64 ))
regslice_both_mac1_s_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(mac1_s_TKEEP),
    .vld_in(mac1_s_TVALID),
    .ack_in(regslice_both_mac1_s_V_keep_V_U_ack_in),
    .data_out(mac1_s_TKEEP_int_regslice),
    .vld_out(regslice_both_mac1_s_V_keep_V_U_vld_out),
    .ack_out(mac1_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_mac1_s_V_keep_V_U_apdone_blk)
);

rtl_kernel_wizard_1_regslice_both #(
    .DataWidth( 1 ))
regslice_both_mac1_s_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(mac1_s_TLAST),
    .vld_in(mac1_s_TVALID),
    .ack_in(regslice_both_mac1_s_V_last_V_U_ack_in),
    .data_out(mac1_s_TLAST_int_regslice),
    .vld_out(regslice_both_mac1_s_V_last_V_U_vld_out),
    .ack_out(mac1_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_mac1_s_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_example_stream_plus1_512_512_s_fu_50_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_example_stream_plus1_512_512_s_fu_50_ap_start_reg <= 1'b1;
        end else if ((grp_example_stream_plus1_512_512_s_fu_50_ap_ready == 1'b1)) begin
            grp_example_stream_plus1_512_512_s_fu_50_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_example_stream_plus1_512_512_s_fu_66_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_example_stream_plus1_512_512_s_fu_66_ap_start_reg <= 1'b1;
        end else if ((grp_example_stream_plus1_512_512_s_fu_66_ap_ready == 1'b1)) begin
            grp_example_stream_plus1_512_512_s_fu_66_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mac0_s_TREADY_int_regslice = grp_example_stream_plus1_512_512_s_fu_50_mac1_s_TREADY;
    end else begin
        mac0_s_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mac1_s_TREADY_int_regslice = grp_example_stream_plus1_512_512_s_fu_66_mac1_s_TREADY;
    end else begin
        mac1_s_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((regslice_both_mac1_m_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_mac0_m_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state3_on_subcall_done = ((grp_example_stream_plus1_512_512_s_fu_66_ap_done == 1'b0) | (grp_example_stream_plus1_512_512_s_fu_50_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((regslice_both_mac1_m_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_mac0_m_V_data_V_U_apdone_blk == 1'b1));
end

assign grp_example_stream_plus1_512_512_s_fu_50_ap_start = grp_example_stream_plus1_512_512_s_fu_50_ap_start_reg;

assign grp_example_stream_plus1_512_512_s_fu_50_mac1_m_TREADY = (mac0_m_TREADY_int_regslice & ap_CS_fsm_state3);

assign grp_example_stream_plus1_512_512_s_fu_66_ap_start = grp_example_stream_plus1_512_512_s_fu_66_ap_start_reg;

assign grp_example_stream_plus1_512_512_s_fu_66_mac1_m_TREADY = (mac1_m_TREADY_int_regslice & ap_CS_fsm_state3);

assign mac0_m_TVALID = regslice_both_mac0_m_V_data_V_U_vld_out;

assign mac0_s_TREADY = regslice_both_mac0_s_V_data_V_U_ack_in;

assign mac1_m_TVALID = regslice_both_mac1_m_V_data_V_U_vld_out;

assign mac1_s_TREADY = regslice_both_mac1_s_V_data_V_U_ack_in;

endmodule //rtl_kernel_wizard_1
